#! /bin/sh

# ? sleep one second to check if this is enough to detect the monitors
sleep 1

# load Xresources
xrdb -merge $HOME/.Xresources

# run the xrandr command if an external monitor is connected to the
# laptop.  This must be executed before the polybar command, so that
# polybar can set the two separate bars properly.
# external_monitor_name=$(xrandr --query | grep -v -w eDP-1 | grep -w connected | awk '{print $1}') 
# # check if there is an external monitor
# if [ -n "$external_monitor_name" ]; then
	# echo "found external monitor $external_monitor_name"
	# export MAIN_MONITOR=$external_monitor_name
	# export SECOND_MONITOR="eDP-1"
	# # configure the two monitors
	# # xrandr --output $external_monitor_name --primary --mode 1920x1080 --right-of eDP-1 --output eDP-1 --mode 1920x1080
	# xrandr --output $external_monitor_name --primary --mode 3440x1440 --right-of eDP-1 --output eDP-1 --mode 1920x1080
# 
	# bspc monitor $external_monitor_name -d 1 2 3 4 5 6
	# bspc monitor eDP-1 -d 7 8 9
	# bspc monitor $external_monitor_name -s eDP-1
# else
	# echo "no external monitors detected"
	# export MAIN_MONITOR="eDP-1"
	# unset SECOND_MONITOR
# 
	# bspc monitor eDP-1 -d 1 2 3 4 5 6
# fi

# confibure the bspwm positions
# xrandr --output HDMI-1 --primary --mode 1920x1080 --right-of HDMI-2 --output HDMI-2 --mode 1920x1080
# the position here is a bit more the 1940 such that the window border does not exit in the other screen (see how the offsets are set below)
# xrandr --output DP-2-0 --primary --mode 2560x1440 --rate 60
# xrandr --output DP-2-0 --primary --mode 3840x2160
# xrandr --output HDMI-2 --primary --mode 1920x1080 --pos 1940x0 --output DP-1 --mode 2560x1440
xrandr --output HDMI-2 --mode 1920x1080 --output DP-1 --primary --mode 3840x2160 --pos 1940x0 

# export bspwm names
bspc monitor DP-1 -d 1 2 3 4 5 6
bspc monitor HDMI-2 -d F1 F2 F3 F4 F5 â€¢

pgrep -x sxhkd > /dev/null || sxhkd &

bspc config border_width         5
bspc config window_gap           5
g=`expr $(bspc config border_width) + $(bspc config window_gap)`
[[ "$g" -gt 0 ]] && for p in top bottom left right; do
    bspc config "${p}_padding" "-${g}"
done
[[ "$g" -gt 0 ]] && for p in top bottom left right; do
    bspc config "${p}_border_width" "-${g}"
done

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
bspc config focus_follows_pointer true
bspc config pointer_follows_monitor true

bspc config focused_border_color \#cc241d
bspc config normal_border_color \#466349
# disable focus stealing
bspc config ignore_ewmh_focus true

# scratchpad rules
bspc rule -a scratchpad sticky=on state=floating hidden=on rectangle=1900x1060+5+5
# load quick rules
$HOME/.config/bspwm/bspwmrc_rules

killall picom
picom --config $HOME/.config/picom/picom.conf &

xset s off -dpms
# set keyboard rate
xset r rate 170 33

# launch the matplotlib tabber
killall automatic_tabbed
$HOME/.config/bspwm/automatic_tabbed &

# start polkit agent
/usr/lib/polkit-kde-authentication-agent-1 &

# use the us international with altgr-intl
setxkbmap -rules evdev -model evdev -layout us -variant altgr-intl

# launch polybar
killall polybar
polybar secondary &

# launch dunst
/usr/bin/dunst &

# disable the stupid beeping
xset -b

# lauch insync if not already running
if pgrep -x insync >/dev/null 
then 
	echo "insync already running" 
else
	echo "launcing insync" && /bin/insync start &
fi

# lauch discord if not already running
if pgrep -x Discord >/dev/null 
then
	echo "discord already running" 
else
	echo "launcing discord" && /bin/discord & 
fi

# lauch timeular if not already running
if pgrep -x Timeular >/dev/null 
then 
	echo "timeular already running" 
else
	echo "launcing timeular" && Timeular &
fi

# lauch birdtray if not already running
if pgrep -x birdtray >/dev/null 
then
	echo "birdtray already running" 
else
	echo "launcing birdtray" && birdtray &
fi

# put the backgound
feh --bg-fill /home/lele/.backgrounds/black.png
